@page "/gallery"
@using System.IO.Compression;
@inject NavigationManager NavigationManager

<style>
#image-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-auto-rows: minmax(150px, auto);
    gap: 10px;
    padding: 5%; 
    margin: auto; 
    max-width: 1200px;
}

.gallery-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 10px;
}

.gallery-item.large {
    grid-column: span 2;
    grid-row: span 2;
}

.gallery-item.wide {
    grid-column: span 2;
}


@@media (max-width: 768px) {
    #image-gallery {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
    .gallery-item.large, .gallery-item.wide {
        grid-column: span 1;
        grid-row: span 1;
    }
}

#add-image {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    margin: 20px 0;
}

    .gallery-item.double-column {
        grid-column: span 2;
    }

    .gallery-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 10px;
        border: 5px solid white; 
        box-sizing: border-box;
    }

    .input-file-gallery {
        display: block;
        width: 70%; 
        margin: 20px auto; 
        border-radius: 0.5rem;
        padding: 0.5rem;
        border: 1px solid #ccc;
        background-color: rgba(255, 255, 255, 0.7); 
        color: black; 
        font-size: 1rem;
    }

        .input-file-gallery::file-selector-button {
            border-radius: 10px; 
            background-color: #7c7277; 
            color: white; 
            border: none; 
            padding: 0.5rem; 
        }

    .temp-gallery-item {
        grid-column: span 1;
        grid-row: span 1;
    }

        .temp-gallery-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
            border: 3px solid #ddd;
        }

    .custom-accordion .accordion-button {
        --bs-accordion-btn-bg: #365664;
    }

    .custom-accordion .accordion-button {
        color: black;
        font-weight:600;
    }

    .custom-accordion .accordion-body {
     
    
        background-image: url('/images/back.png');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center center;
        -webkit-text-size-adjust: 100%;
        margin: 0;
        font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Lato,Roboto,"Helvetica Neue",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
        font-size: 72%;
        color: #333;
        background-color: #e3e6e8 !important;
    
    }


    .pdf-item card {
        display: flex;
        align-items: center;
        background-image: url('/images/back.png');
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        margin: 10px;
    }

   

    .pdf-thumbnails {
        display: flex;
        flex-wrap: wrap; 
        justify-content: center; 
        gap: 5px; 
        align-items: stretch;
    }

        .pdf-item:hover {
            transform: scale(1.03); 
        }

    .pdf-item {
        flex: 0 1 20%; 
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color:white;
        background-image: url('/images/back.png');
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        margin: 10px; 
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        position: relative; 
        }
        .pdf-item img {
            width: 60px;
            height: 60px;
            margin-bottom: 10px; 
        }

    .btn-container {
        display: flex;
        width: 100%; 
        justify-content: space-between;
        margin-top: 10px; 
        position: sticky;
        bottom: 0;
        padding: 10px;
    }

    .btn {
        flex: 1;
        margin: 0 10px; 
    }

    .btn-primary {
        background-color: #0056b3; 
        padding: 8px 16px;
        font-weight: bold; 
        transition: background-color 0.2s; 
    }

        .btn-primary:hover {
            background-color: #004085; 
        }

    .btn-danger {
        background-color: #c9302c; 
        padding: 8px 16px; 
        font-weight: bold;
        transition: background-color 0.2s; 
    }

        .btn-danger:hover {
            background-color: #761c19; 
        }

    .txt {
        text-align: left; 
        font-weight: bold;
        font-size: 16px;
        font-family: 'Roboto', sans-serif;
        padding: 0 10px;
        display: flex;
        flex-direction: column;
        height: 100%;
        margin-bottom: 20px;
    }

    

   
</style>
<div class="d-flex justify-content-center mb-0" style="align-items: center; width: 100%;">
    <img src="images/logoClimb.png" alt="ClimbApp Logo" style="margin: 10px; height: 4.75rem; border-radius: 50%;" class="logo" />
    <h1 style="color: white; margin-left: 10px; margin-right: 10px;">Galería de imagenes y pdf con mapas</h1>
    <RadzenButton Click="LoginGo" Variant="Variant.Outlined" Text="Volver" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:5px; border:solid 1px white" />
</div>
<br />
<br />
<br />
<BlazorBootstrap.Accordion class="custom-accordion">
    <AccordionItem>
         <TitleTemplate>
                <RadzenIcon Icon="map" IconColor="@Colors.Info" />  &nbsp &nbsp Croquis de las escuelas (Mapas)
         </TitleTemplate>
        <Content>
            <div class="form-group text-center">
                <!-- Agregada la clase text-center -->
                <InputFile class="input-file-gallery" id="pdfFile" accept=".pdf" OnChange="HandlePdfSelection" />
                <button class="btn btn-primary" @onclick="HandlePdfUpload">Subir PDF</button>
                <p style="color:white; font-size:14px">@pdfUploadStatus</p>
            </div>

            <div class="pdf-thumbnails">
                @foreach (var file in Files)
                {
                    <div class="pdf-item"  style="background: transparent; border: none; box-shadow: none;">
                        
                        <div class="txt">@file</div>
                        <img src="@pdfIconUrl" alt="PDF Icon" />
                        <div class="btn-container">
                             <a class="btn btn-primary" href="/pdf/@file" download> 
                            <RadzenIcon Icon="assignment_returned" IconColor="@Colors.White" /> 
                            </a>
                            <button class="btn btn-danger" @onclick="() => RemovePdf(file)"> <RadzenIcon Icon="delete" IconColor="@Colors.White" /></button>
                        </div>
                    </div>
                }
            </div>
        </Content>
    </AccordionItem>

    <AccordionItem>
       <TitleTemplate>
            <RadzenIcon Icon="camera_enhance" IconColor="@Colors.Info" /> &nbsp &nbsp Fotos de escalada.
         </TitleTemplate>
       
            <Content>
            
                <div class="form-group">
                    <InputFile class="input-file-gallery" id="avatar" accept="image/*" OnChange="LoadTemporaryImage" />
                </div>
                <div id="image-gallery">
                    @foreach (var imageUrl in temporaryImages)
                    {
                        <div class="gallery-item"><img src="@imageUrl" alt="Imagen Temporal" /></div>
                    }
                   
                </div>
                <div id="image-gallery">
                    <div class="gallery-item large"><img src="/images/7.jpg" alt="Escalada 1" /></div>
                    <div class="gallery-item"><img src="/images/2.jpg" alt="Escalada 2" /></div>
                    <div class="gallery-item"><img src="/images/3.jpg" alt="Escalada 3" /></div>
                    <div class="gallery-item wide"><img src="/images/4.jpg" alt="Escalada 4" /></div>
                    <div class="gallery-item"><img src="/images/5.jpg" alt="Escalada 5" /></div>
                    <div class="gallery-item"><img src="/images/6.jpg" alt="Escalada 6" /></div>
                    <div class="gallery-item large"><img src="/images/1.jpg" alt="Escalada 7" /></div>
                    <div class="gallery-item wide"><img src="/images/8.jpg" alt="Escalada 8" /></div>
                    <div class="gallery-item"><img src="/images/9.jpg" alt="Escalada 9" /></div>
                    <div class="gallery-item"><img src="/images/10.jpg" alt="Escalada 10" /></div>
                    <div class="gallery-item full-width"><img src="/images/11.jpg" alt="Escalada 11" style="width:200%" /></div>
                    <div class="gallery-item large"><img src="/images/12.jpg" alt="Escalada 12" /></div>
                    <div class="gallery-item full-width"><img src="/images/13.jpg" alt="Escalada 13" style="width:200%" /></div>
                    <div class="gallery-item wide"><img src="/images/14.jpg" alt="Escalada 14" /></div>
                    <div class="gallery-item"><img src="/images/15.jpg" alt="Escalada 15" /></div>
                </div>
            </Content>
        </AccordionItem>
</BlazorBootstrap.Accordion>

@code {
    private List<string> temporaryImages = new List<string>();
    private List<string?> Files { get; set; }
    private IBrowserFile? selectedPdf;
    private string? pdfUploadStatus;
    private string pdfIconUrl = "/images/des.jpg";
    private string? selectedPdfPath;


    protected override void OnInitialized()
    {
        var path = Path.Combine("wwwroot", "pdf");
        Files = Directory.GetFiles(path).Select(Path.GetFileName).ToList();
    }
    private async Task LoadTemporaryImage(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            long maxAllowedSize = 1024L * 1024L * 10L;
            var stream = imageFile.OpenReadStream(maxAllowedSize);


            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            stream.Close();
            memoryStream.Seek(0, SeekOrigin.Begin);

            var imageData = new byte[memoryStream.Length];
            memoryStream.Read(imageData, 0, imageData.Length);
            var imageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(imageData)}";
            temporaryImages.Add(imageDataUrl);
        }
    }
    private void HandlePdfSelection(InputFileChangeEventArgs e)
    {
        selectedPdf = e.File;
        long maxAllowedSize = 1024L * 1024L * 100L; 

        if (selectedPdf.Size > maxAllowedSize)
        {
            pdfUploadStatus = $"El archivo PDF seleccionado supera el límite de tamaño permitido de {maxAllowedSize / (1024 * 1024)} MB.";
            return;
        }

        pdfUploadStatus = $"Archivo PDF '{selectedPdf.Name}' seleccionado. Listo para subir.";
        StateHasChanged();
    }

    private async Task HandlePdfUpload()
    {
        if (selectedPdf != null)
        {
            long maxAllowedSize = 1024L * 1024L * 100L; 
         
            if (selectedPdf.Size > maxAllowedSize)
            {
                pdfUploadStatus = $"El archivo PDF seleccionado supera el límite de tamaño permitido de {maxAllowedSize / (1024 * 1024)} MB.";
                return;
                
            }

            var path = Path.Combine("wwwroot", "pdf", $"{Path.GetFileNameWithoutExtension(selectedPdf.Name)}.zip");

            using (var originalFileStream = selectedPdf.OpenReadStream(maxAllowedSize))
            {
                using (var fileStream = new FileStream(path, FileMode.Create))
                using (var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Create))
                {
                    var zipEntry = zipArchive.CreateEntry(selectedPdf.Name);

                    using (var entryStream = zipEntry.Open())
                    {
                        await originalFileStream.CopyToAsync(entryStream);
                    }
                }
            }
            selectedPdfPath = path;
            pdfUploadStatus = $"Archivo PDF '{selectedPdf.Name}' subido y comprimido con éxito.";
            StateHasChanged();
        }
        else
        {
            pdfUploadStatus = "No se seleccionó ningún archivo PDF.";
        }
    }
    private void LoginGo()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetFileUrl(string fileName)
    {
        return $"/pdf/{fileName}";
    }
    private void RemovePdf(string fileName)
    {
     
        Files.Remove(fileName);
        var filePath = Path.Combine("wwwroot", "pdf", fileName);
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
            StateHasChanged();
        }
    }
}

}
