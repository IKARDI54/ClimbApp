@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject HttpClient Http
@using BlazorCLIMB.UI.Shared
@using BlazorCLIMB.UI.Services
@inject IJSRuntime JS
@using System.Text.Json;

<style>
    .central-column {
        background-color: black;
        /* Agregar más estilos si es necesario */
    }

    .avatar-menu {
        position: absolute;
        top: 50px; /* Ajusta la posición vertical según tus necesidades */
        right: 10px; /* Ajusta la posición horizontal según tus necesidades */
        width: 200px;
        max-height: 200px;
        background-color: white;
        border: 1px solid #ccc;
        z-index: 1002;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 10px;
    }

        .avatar-menu button {
            margin: 5px; /* Espacio entre los botones */
        }
</style>

<div class="page">
   
    @if (ShowNavMenu)
    {
        <div class="sidebar">
            <NavMenu/>
            <CustomLayout />

        </div>
    }
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
    
</div>

@code {
    

    private List<RouteInfo> Routes { get; set; } = new List<RouteInfo>();

    private bool ShowNavMenu => !NavManager.Uri.EndsWith("/Login", StringComparison.OrdinalIgnoreCase)
                            && !NavManager.Uri.EndsWith("/register", StringComparison.OrdinalIgnoreCase)
                            && !NavManager.Uri.EndsWith("/climbingRouteList", StringComparison.OrdinalIgnoreCase)
                         && !NavManager.Uri.EndsWith("/register", StringComparison.OrdinalIgnoreCase);
                        
    // && !NavManager.Uri.EndsWith("/climbingRouteList", StringComparison.OrdinalIgnoreCase);


    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }


}
