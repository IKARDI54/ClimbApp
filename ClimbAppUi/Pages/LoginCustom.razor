@page "/Login"
@using BlazorCLIMB.Model.BlazorCRUD.Model;
@using BlazorCLIMB.UI.Interfaces
@using System.ComponentModel.DataAnnotations
@using Radzen

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<style>
.container{

    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
}

body {
    background-image: url('/images/169781.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    background-attachment: fixed;
    height: 100%;
    width: 100%;
    backdrop-filter: blur(5px);
}

.card {
    width: 420px;
    margin: 0 auto;
    background: linear-gradient(0deg, rgba(128, 128, 128, 0.3), rgba(0, 0, 0, 0.8));
    padding: 20px;
    border-radius: 10px;
}

.card-title {
    text-align: center;
    font-size: 24px;
    color: #FFF;
}

.form-control {
    background-color: transparent;
    color: black;
    margin: 10px;
    border: 2px solid #817B77;
    border-radius: 10px;
    padding-left: 30px;
}

.input-icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
}

.card-body h4 {
    text-align: center;
    font-size: 24px;
    color: #FFF;
}

.card-body h6 {
    text-align: center;
    font-size: 16px;
    color: #FFF;
}

.login-button {
    width: 80%;
    margin: 20px auto;
    display: block;
    background-color: rgba(255, 255, 255, 0.7); /* Fondo semi-transparente blanco */
    border-radius: 10px;
    color: #000; /* Color de texto negro */
}

.google-button {
    background-color: rgba(255, 255, 255, 0.7); /* Fondo semi-transparente blanco */
    color: #000; /* Color de texto negro */
    width: 80%;
    margin: 0 auto;
    display: block;
    border-radius: 10px;
}

    .google-button i {
        margin-right: 10px;
    }

.register-link {
    text-align: center;
    font-size: 12px;
    color: #FFF;
    margin-top: 10px;
}

    .register-link a {
        color: #FFF;
        font-weight: bold;
        text-decoration: none;
    }

.radzen-stack-centered {
    display: flex;
    justify-content: center; /* Centra horizontalmente */
    align-items: center; /* Centra verticalmente */
    height: 100%; /* Puede que necesites ajustar esto dependiendo del tamaño de tu div */
}




.google-icon {
    background-image: url('images/google.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-right: 8px; /* margen para separar el icono del texto */
    border-radius: 50%;
    vertical-align: middle; /* para centrarlo verticalmente con el texto */
}

.radzen-button {
    background-color: transparent; /* fondo transparente */
}

</style>

<div class="container">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Login</h3>
        </div>
        <div class="card-body">
            <h4>Please enter your email and password</h4>
            <form @onsubmit="@HandleValidSubmit">
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="text" class="form-control" placeholder="Email" @bind="model.Email" required />
                </div>
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="password" class="form-control" placeholder="Password" @bind="model.Password" required />
                </div>
                <button type="submit" class="btn btn-secondary login-button">Login</button>
                <!-- Enlace para registro -->
                <div class="mt-2" style="margin-left: 40px;">
                    <p style="color: black;">¿No estás registrado? <a href="/register">Regístrate</a></p>
                </div>
            </form>
            <p style="color:white">@message</p>
            <SurveyPrompt Title="@message" />
        </div>
    </div>
</div>


@code {
    private AuthModel model = new AuthModel();
    private string message = "";
    private int userId = 0;// Mensaje de autenticación
    private string token = "";
    private string NameUser = "";
    private User userData = new User();

    private async Task HandleValidSubmit()
    {
        var authenticationResult = await AuthService.VerifyPassword(model.Email, model.Password);

        if (authenticationResult.IsSuccess)
        {
            UserSession.SetToken(authenticationResult.Token); // Aquí capturamos el token
            userData = await AuthService.GetUserByEmail(model.Email);
            NameUser = userData.Name;
            token = authenticationResult.Token;
            userId = UserSession.ExtractUserIdFromToken(token);
            message = "Authentication has been successful, Wellcome to ClimbApp "+NameUser;
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Mostrar un mensaje en inglés en caso de fallo
            message = "Authentication failed. Please check your credentials.";
            StateHasChanged();
        }
    }

    public class AuthModel
    {
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
  
}

