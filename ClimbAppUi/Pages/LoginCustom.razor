@page "/Login"
@using BlazorCLIMB.Model.BlazorCRUD.Model;
@using BlazorCLIMB.UI.Interfaces
@using System.ComponentModel.DataAnnotations
@using Radzen

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    body {
        background: radial-gradient(circle, rgba(178,180,188,1) 21%, rgba(98,82,85,1) 100%);
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        height: 100%;
        width: 100%;
        backdrop-filter: blur(5px);
    }

    .card {
        width: 50rem;
        height: auto;
        margin: 0 auto;
        background: linear-gradient(0deg, rgba(128, 128, 128, 0), rgba(0, 0, 0, 0));
        padding: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }

    .card-title {
        text-align: center;
        font-size: 2rem;
        color: #FFF;
    }

    .form-group {
        position: relative;
        margin-bottom: 0.5rem;
    }

    .input-icon .icon {
        position: absolute;
        left: 0.10rem;
        top: 50%;
        transform: translateY(-50%);
        color: #fff;
        font-size: 1.2rem;
    }

    .form-control {
        width: 80%;
        height: 2rem;
        padding: 0.5rem 0.5rem 0.5rem 3rem;
        font-size: 1rem;
        border-radius: 0.25rem;
        border: 1px solid #ccc;
        margin: 10px auto;
        background-color: transparent;
        color: black;
    }

        .form-control::placeholder {
            padding-left: 10%;
            color: white;
         
        }

    .login-button {
        width: 50%;
        padding: 0.5rem;
        margin: 20px auto;
        display: block;
        border-radius: 10px;
        color: #000;
        background-color: rgba(255, 255, 255, 0.7);
        border: none;
    }

    .card-header img {
        height: 4rem;
    }

    .register-link,
    .message {
        text-align: center;
        font-size: 1rem;
        color: #FFF;
        margin-top: 1rem;
    }

        .register-link a {
            color: #FFF;
            font-weight: bold;
            text-decoration: none;
        }

    .card-header {
        position: relative;
        text-align: center;
        padding: 1rem 0;
        border-bottom: 1px solid #ccc;
    }

        .card-header .user-icon {
            font-size: 2rem;
            color: #fff;
            margin-bottom: 0.5rem;
        }

    .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #333;
        color: #fff;
        border-radius: 5px;
        padding: 10px 20px;
        z-index: 9999;
    }

        .toast .toast-icon {
            float: left;
            margin-right: 10px;
        }

        .toast .message {
            font-size: 16px;
        }

        .toast #icon {
            font-size: 24px;
        }

</style>


<div class="d-flex justify-content-center align-items-center">
    <img src="images/logoClimb.png" alt="ClimbApp Logo" class="img-fluid" style="height: 5rem; border-radius: 50%; margin-bottom: 30px;" />
</div>

    <div class="card">
        <div class="card-header">
           
            <i class="far fa-user user-icon" ></i> 
            <h1 style="color:white; margin:10px">Login</h1>
        </div>

        <div class="card-body">
           
            <form @onsubmit="@HandleValidSubmit">
                <div class="form-group input-icon">
                    <i class="fa fa-envelope icon"></i>
                    <input type="text" class="form-control" placeholder="Email" @bind="model.Email" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-key icon"></i>
                    <input type="password" class="form-control" placeholder="Password" @bind="model.Password" required />
                </div>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap">
                    <div style="flex-grow: 1;"></div> 
                    <RadzenButton Type="submit" Variant="Variant.Outlined" Shade="Shade.Darker" Text="Login" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" style="margin: 20px; font-weight: bold;" />
                    <RadzenButton Type="submit" Variant="Variant.Outlined" Shade="Shade.Darker" Click="Cancelar" Text="Return" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Medium" style="margin: 20px; font-weight: bold;" />
                    <div style="flex-grow: 1;"></div>
                </RadzenStack>


                <div class="mt-2 register-link">
                    <p>¿No estás registrado? <a href="/register">Regístrate</a></p>
                </div>
            </form>
            
        </div>
    @if (showToast)
    {
        <div class="toast" style="display: block;">
            <div class="toast-icon">
                <RadzenIcon Icon="account_box" IconColor="@Colors.Info" />
            </div>
            <div class="toast-message"> &#x1F604 @message</div>
        </div>

    }
    </div>



@code {
    private AuthModel model = new AuthModel();
    private string message = "";
    private int userId = 0;
    private string token = "";
    private string NameUser = "";
    private User userData = new User();
    private bool showToast = false;
    private string toastMessage = "";

    private async Task HandleValidSubmit()
    {

        var resultadoAutenticacion = await AuthService.VerifyPassword(model.Email, model.Password);

        if (resultadoAutenticacion.IsSuccess)
        {
            UserSession.SetToken(resultadoAutenticacion.Token);
            userData = await AuthService.GetUserByEmail(model.Email);
            NameUser = userData.Name;
            token = resultadoAutenticacion.Token;
            userId = UserSession.ExtractUserIdFromToken(token);
            message = $"Bienvenido a ClimbApp, {NameUser}. Para tu seguridad, te recomendamos actualizar tu contraseña a nuestro nuevo sistema de encriptación más seguro. ¡Tu seguridad es nuestra prioridad!";
            StateHasChanged();
            ShowToast(message);
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = "La autenticación falló. Por favor, verifica tus credenciales.";
            ShowToast(message);
            StateHasChanged();
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/");
    }

    public class AuthModel
    {
        [Required(ErrorMessage = "El correo electrónico es obligatorio")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        public string? Password { get; set; }
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(t =>
        {
            showToast = false;
        });
    }

}

