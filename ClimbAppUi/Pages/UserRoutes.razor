@page "/userRoutes/{routeId}"
@using BlazorCLIMB.Model
@using BlazorBootstrap;

@using BlazorCLIMB.Model.BlazorCRUD.Model;
@using Interfaces
@inject IClimbingRouteService ClimbingRouteService
@inject NavigationManager NavigationManager
@inject IUserClimbingRouteService UserClimbingRouteService
@using BlazorCLIMB.UI.Services
@inject IRouteRatingService RouteRatingService

<div class="container" style="color:white; font-weight:600">
    <h1 style="color:white; font-weight:600">Detalles de la Vía Escalada</h1>
    <RadzenButton Click="LoginGo" Variant="Variant.Outlined" Text="Volver" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:75%;" />
@if (climbingRoute != null)
{
    <div>
            <h2 style="color:white; font-weight:600">@climbingRoute.Name</h2>
            <h1 style="color:white; font-weight:600">@climbingRoute.Grade</h1>
    <p>@climbingRoute.Description</p>
    

            <h3 style="color:white; font-weight:600">Anotación de Vía Escalada</h3>
            <form style="color:white; font-weight:600">
        <div class="form-group">
            <label for="comments">Comentarios:</label>
            <input type="text" class="form-control" id="comments" @bind="userClimbingRoute.Comments" />
        </div>
        <div class="form-group">
            <label for="pegs">Pegs:</label>
            <input type="number" class="form-control" id="pegs" @bind="userClimbingRoute.Pegs" />
        </div>
        <div class="form-group">
            <label for="cintas">Cintas:</label>
            <input type="number" class="form-control" id="cintas" @bind="userClimbingRoute.Cintas" />
        </div>
        <div class="form-group">
            <label for="date">Fecha:</label>
            <input type="date" class="form-control" id="date" @bind="userClimbingRoute.Date" />
        </div>
                <div class="form-group">
                    <label for="rating">Valoración:</label>
                    <input type="number" class="form-control" id="rating" @bind="userClimbingRoute.Rating" />
                </div>


            <button class="btn btn-primary" @onclick="() => GuardarAnotacion(userClimbingRoute)">Guardar Anotación</button>
        </form>
    </div>
}

    <h3 style="color:white; font-weight:600">Cuaderno de bitácora (La lista de vias esclaladas por tí)</h3>
    @if (userClimbingRouteList != null && userClimbingRouteList.Any())
    {
        <table class="table" style="color:white; font-weight:600">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Grado</th>
                    <th>Escuela</th>
                    <th>Sector</th>
                    <th>Comentarios</th>
                    <th>Pegs</th>
                    <th>Cintas</th>
                    <th>Valoración</th> <!-- Agregar esta columna -->
                    <th>Fecha</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var anotacion in userClimbingRouteList)
                {

                    var rating = anotacion.Rating;

                    <tr>
                        <td>@(anotacion.ClimbingRoute != null ? anotacion.ClimbingRoute.Name : "N/A")</td>
                        <td>@(anotacion.ClimbingRoute != null ? anotacion.ClimbingRoute.Grade : "N/A")</td>
                        <td>@(anotacion.ClimbingRoute != null ? anotacion.ClimbingRoute.ClimbingSchoolId.ToString() : "N/A")</td>
                        <td>@(anotacion.ClimbingRoute?.ClimbingSector ?? "N/A")</td>
                        <td>@(anotacion.Comments ?? "N/A")</td>
                        <td>@(anotacion.Pegs.HasValue ? anotacion.Pegs.ToString() : "N/A")</td>
                        <td>@(anotacion.Cintas.HasValue ? anotacion.Cintas.ToString() : "N/A")</td>
                         <td>@(rating.HasValue ? rating.Value.ToString() : "N/A")</td> 
                        <td>@(anotacion.Date.HasValue ? anotacion.Date.ToString() : "N/A")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
else
{
    <p>No tienes anotaciones de esta vía.</p>
}
</div>
@code {
    double? ratingTask = 0;
    int userId = UserSession.UserId;
    private User user;
    private int routeId;
    private bool routeCreated;
    private ClimbingRoute climbingRoute;
    private UserClimbingRoutes userClimbingRoute = new UserClimbingRoutes();
    private IEnumerable<UserClimbingRoutes> userClimbingRouteList = Enumerable.Empty<UserClimbingRoutes>();

    [Parameter]
    public string RouteId
    {
        get { return routeId.ToString(); }
        set
        {
            if (int.TryParse(value, out int result))
            {
                routeId = result;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int userId = UserSession.UserId;

        if (routeId > 0)
        {
            climbingRoute = await ClimbingRouteService.GetClimbingRouteDetails(routeId);
        }

        userClimbingRouteList = await UserClimbingRouteService.GetUserClimbingRoutes(userId);

        // Obtener las valoraciones de las vías escaladas antes del bucle
        var ratingDictionary = new Dictionary<int, double>();
        foreach (var anotacion in userClimbingRouteList)
        {
            anotacion.ClimbingRoute = await ClimbingRouteService.GetClimbingRouteDetails(anotacion.ClimbingRouteId);
            var rating = await UserClimbingRouteService.GetRatingForClimbingRoute(anotacion.ClimbingRouteId);
            ratingDictionary[anotacion.ClimbingRouteId] = rating ?? 0;
        }

        // Asignar las valoraciones a las anotaciones
        foreach (var anotacion in userClimbingRouteList)
        {
            anotacion.Rating = ratingDictionary.ContainsKey(anotacion.ClimbingRouteId) ? Convert.ToInt32(ratingDictionary[anotacion.ClimbingRouteId]) : 0;

        }

        userClimbingRoute.UserId = userId;
        userClimbingRoute.ClimbingRouteId = routeId;
        ratingTask = await RouteRatingService.GetAverageRating(routeId);

        // Después
        var averageRating = await RouteRatingService.GetAverageRating(routeId);
        ratingTask = averageRating;
    }

    private async Task GuardarAnotacion(UserClimbingRoutes userClimbingRoute)
    {


        // Llamar al servicio para crear la anotación de vía escalada
        bool resultado = await UserClimbingRouteService.CreateUserClimbingRoute(userClimbingRoute);

        if (resultado)
        {
            routeCreated = true;
        };

      
        int? rating = (int?)userClimbingRoute.Rating ?? 0;
        bool puntuacion = await RouteRatingService.RateClimbingRoute(userClimbingRoute.UserId, userClimbingRoute.ClimbingRouteId, rating ?? 0);

    }
    private void LoginGo()
    {
        NavigationManager.NavigateTo("/climbingRouteList");
    }
}
 