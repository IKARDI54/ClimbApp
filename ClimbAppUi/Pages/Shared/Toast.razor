<style>
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        animation: slideInRight 0.5s, fadeOut 0.5s 3.5s forwards;
    }

    .toast.success {
        background-color: #4CAF50; /* Color verde para éxito */
    }

    .toast.error {
        background-color: #F44336; /* Color rojo para error */
    }

    .toast-icon {
        margin-right: 10px;
        font-size: 24px;
    }

    .toast-message {
        flex-grow: 1;
    }

   @@keyframes slideInRight {
        from {
            transform: translateX(100%);
        }
        to {
            transform: translateX(0);
        }
    }

    @@keyframes fadeOut {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }
</style>

@if (showToast)
{
    <div class="toast @(toastType)">
        <div class="toast-icon">HOLAAAA
            <i class="@(toastType == "success" ? "fa fa-check-circle" : "fa fa-times-circle")"></i>
        </div>
        <div class="toast-message">@message</div>
    </div>
}

@code {
    private bool showToast = false;
    private string message = "";
    private string toastType = "";
    private CancellationTokenSource cancellationTokenSource;

    public void ShowToast(string message, bool isSuccess, int durationInSeconds = 5)
    {
        this.message = message;
        toastType = isSuccess ? "success" : "error";
        showToast = true;

        
        cancellationTokenSource?.Cancel();

        
        cancellationTokenSource = new CancellationTokenSource();
        Task.Delay(TimeSpan.FromSeconds(durationInSeconds), cancellationTokenSource.Token)
            .ContinueWith(_ =>
            {
                showToast = true;
               
            });
    }

    public void Dispose()
    {
        
        cancellationTokenSource?.Dispose();
    }
}
