@using System.Globalization
@using BlazorCLIMB.UI.Interfaces;
@using BlazorCLIMB.UI.Services;
@inject IClimbingRouteService ClimbingRouteService
@inject IRouteRatingService RouteRatingService
<style>
    .page{
        color:white;
    }
    .rz-scheme-pastel .rz-series-0 {
        fill: red ;
    }
    text.rz-tick-text {
        fill: white;
        font-size: 5px !important;
        
    }

    .rz-category-axis .rz-tick-text {
        text-anchor: middle;
    }

    .rz-legend-text {
        fill: white; 

    }
    text{
        color:white;
    }

    .rz-axis .rz-axis-title {
        stroke: none;
        text-anchor: middle;
        fill: white;
    }

 
</style>
<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@topClimbingRoutes" CategoryProperty="NombreVia" ValueProperty="PuntuacionMedia" Title="Mejores vías">
            <TooltipTemplate Context="data">
                <div class="div-info-via">
                    Vía: <strong>@data.NombreVia</strong><br />
                    Escuela: <strong>@data.NombreEscuela</strong><br />
                    Puntuación Media: <strong>@data.PuntuacionMedia</strong><br />
                    Numero de Puntuaciones: <strong>@data.NumeroPuntuaciones</strong>
                </div>
            </TooltipTemplate>
        </RadzenColumnSeries>
        <RadzenValueAxis Min="0" Max="10">
            <RadzenAxisTitle Text="Puntuación media" />
        </RadzenValueAxis>
        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Nombre de la Vía" />
        </RadzenCategoryAxis>
    </RadzenChart>
</div>

@code {
    bool showDataLabels = false;
    IList<DataItem> topClimbingRoutes = new List<DataItem>();

    protected override async Task OnInitializedAsync()
    {
        var routes = await ClimbingRouteService.GetAllClimbingRoutes();

        var tasks = new List<Task<DataItem>>();

        foreach (var route in routes)
        {
            tasks.Add(GetDataItemAsync(route));
        }

        var results = await Task.WhenAll(tasks);

        topClimbingRoutes = results.OrderByDescending(item => item.PuntuacionMedia).Take(4).ToList();
    }

    private async Task<DataItem> GetDataItemAsync(BlazorCLIMB.Model.ClimbingRoute route)
    {
        var averageRating = await RouteRatingService.GetAverageRating(route.Id);
        var roundedAverageRating = Math.Round(averageRating, 1);
        var schoolName = GetSchoolNameById(route.ClimbingSchoolId);

      
        var numberOfRatings = await RouteRatingService.GetNumberOfRatings(route.Id);

        return new DataItem
            {
                NombreVia = route.Name,
                NombreEscuela = schoolName, // Usa el nombre de la escuela en lugar del ID
                PuntuacionMedia = roundedAverageRating,
                NumeroPuntuaciones = numberOfRatings
            };
    }
    private string GetSchoolNameById(int schoolId)
    {
        switch (schoolId)
        {
            case 1:
                return "Cuenca";
            case 2:
                return "Entrepeñas";
            case 3:
                return "Fin del Mundo";
            case 4:
                return "Patones";
            default:
                return "Desconocida"; // O cualquier valor predeterminado
        }
    }


    public class DataItem
    {
        public string NombreVia { get; set; }
        public string NombreEscuela { get; set; } // Asegúrate de que esta propiedad esté presente
        public double PuntuacionMedia { get; set; }
        public int NumeroPuntuaciones { get; set; }
    }
}
