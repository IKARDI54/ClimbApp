@using System.Globalization
@using BlazorCLIMB.Data.Dapper.Repositories;
@using BlazorCLIMB.UI.Interfaces;
@using BlazorCLIMB.UI.Services;
@using static BlazorCLIMB.Data.Dapper.Repositories.ClimbingRouteRepository;
@inject IClimbingRouteService ClimbingRouteService
@inject IClimbingRouteRepository ClimbingRouteRepository

<div class="container">
    <div class="row">
        <div class="col-lg-4 col-md-4 col-sm-12">
            <RadzenChart ColorScheme="@colorScheme">
                <RadzenColumnSeries Data="@chartData" CategoryProperty="SchoolName" Title="Número de Rutas" ValueProperty="NumberOfRoutes" />
                <RadzenColumnSeries Data="@chartData" CategoryProperty="SchoolName" Title="Valoración Media" ValueProperty="AverageRating" />
                <RadzenColumnSeries Data="@chartData" CategoryProperty="SchoolName" Title="Grado Medio" ValueProperty="AverageGrade" />
                <RadzenCategoryAxis>
                    <RadzenGridLines Visible="true" Stroke="#ccc" LineType="LineType.Dashed" />
                </RadzenCategoryAxis>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenLegend Visible="true" />
                <RadzenChartTooltipOptions Style="border: 1px solid #000; background: #eee; color: #333;" />
            </RadzenChart>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-12">
            <RadzenChart ColorScheme="@colorScheme">
                <RadzenPieSeries Data="@chartData" Title="Porcentaje de Rutas" CategoryProperty="SchoolName" ValueProperty="PercentageOfRoutes" />
                <RadzenLegend Visible="true" />
            </RadzenChart>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-12">
            <RadzenChart ColorScheme="@colorScheme">
                <RadzenAreaSeries Data="@chartData" CategoryProperty="SchoolName" ValueProperty="NumberOfRatings" Stroke="rgb(100,149,237)" StrokeWidth="2" Fill="rgba(100,149,237,.5)">
                    <ChildContent>
                        <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#fff" Stroke="rgb(100,149,237)" StrokeWidth="2" Size="8" />
                    </ChildContent>
                    <TooltipTemplate Context="data">
                        Valoraciones para <span>@data.SchoolName</span>: <strong>@data.NumberOfRatings</strong>
                    </TooltipTemplate>
                </RadzenAreaSeries>
                <RadzenCategoryAxis>
                    <RadzenGridLines Visible="true" Stroke="#ccc" LineType="LineType.Dashed" />
                </RadzenCategoryAxis>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenChartTooltipOptions Style="border: 1px solid #000; background: #eee; color: #333;" />
                <RadzenLegend Visible="false" />
            </RadzenChart>
        </div>
    </div>
</div>


@code {
    private IEnumerable<SchoolRoutesCount> routesCountBySchool;
    private IEnumerable<SchoolAverageRating> averageRatingBySchool;
    private List<DataItem> chartData;
    ColorScheme colorScheme = ColorScheme.Palette;
    private int totalRoutes; 
    

    protected override async Task OnInitializedAsync()
    {
        // Obtenemos el número de rutas por escuela de escalada.
        routesCountBySchool = await ClimbingRouteService.GetRoutesCountBySchool();

        // Obtenemos la media de calificación por escuela de escalada.
        averageRatingBySchool = await ClimbingRouteService.GetAverageRatingBySchool();

        // Calculamos el total de rutas sumando el número de rutas de cada escuela.
        totalRoutes = routesCountBySchool.Sum(item => item.NumberOfRoutes);

        // Transformamos los datos para su posterior representación en un gráfico.
        chartData = await TransformDataForChart();

    }
    // Definimos una clase para mapear los datos a tus gráficos
    public class DataItem
    {
        public string? SchoolName { get; set; }
        public string? SchoolId { get; set; }
        public int    NumberOfRoutes { get; set; }
        public double AverageRating { get; set; }
        public double AverageGrade { get; set; } 
        public double PercentageOfRoutes { get; set; } 
        public int    NumberOfRatings { get; set; } 
    }
    private string GetSchoolNameById(int schoolId)
    {
        switch (schoolId)
        {
            case 1: return "Cuenca";
            case 2: return "Entrepeñas";
            case 3: return "Fin Del Mundo";
            case 4: return "Patones";
            default: return "Desconocida"; 
        }
    }

    private async Task<List<DataItem>> TransformDataForChart()
    {
        // Creamos una lista para almacenar los datos transformados
        var chartData = new List<DataItem>();

        // Obtenemos el promedio de calificaciones por escuela de escalada
        var averageGrades = await ClimbingRouteService.GetAverageGradeBySchool();

        // Iteramos a través de las rutas por escuela
        foreach (var item in routesCountBySchool)
        {
            // Obtenemos el nombre de la escuela de escalada
            var schoolName = GetSchoolNameById(item.ClimbingSchoolId);

            // Buscamos la calificación promedio y el número de valoraciones correspondientes a la escuela actual
            var averageRating = averageRatingBySchool.FirstOrDefault(s => s.ClimbingSchoolId == item.ClimbingSchoolId)?.AverageRating ?? 0;
            var numberOfRatings = averageRatingBySchool.FirstOrDefault(s => s.ClimbingSchoolId == item.ClimbingSchoolId)?.NumberOfRatings ?? 0;

            // Calculamos el promedio de grado numérico para la escuela actual
            var averageGradeNumeric = Math.Round(averageGrades.FirstOrDefault(ag => ag.ClimbingSchoolId == item.ClimbingSchoolId)?.AverageGrade ?? 0, 1);

            // Creamos un nuevo objeto DataItem con la información obtenida y agregarlo a la lista
            chartData.Add(new DataItem
                {
                    SchoolName = schoolName,
                    NumberOfRoutes = item.NumberOfRoutes,
                    AverageRating = averageRating,
                    AverageGrade = averageGradeNumeric,
                    PercentageOfRoutes = totalRoutes > 0 ? (double)item.NumberOfRoutes * 100 / totalRoutes : 0,
                    NumberOfRatings = numberOfRatings
                });
        }

        // Devolvemos la lista de datos transformados
        return chartData;
    }


}