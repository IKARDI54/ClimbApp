@using System.Globalization
@using BlazorCLIMB.Data.Dapper.Repositories;
@using BlazorCLIMB.Model;
@using BlazorCLIMB.UI.Interfaces;
@using BlazorCLIMB.UI.Services;
@inject IClimbingRouteService ClimbingRouteService
@inject IAuthService AuthService
@inject IUserClimbingRouteService UserClimbingRouteService
@inject IRouteRatingService RouteRatingService
<style>
    .rz-scheme-pastel .rz-series-0 {
        fill: #269bbd;
    }

    text.rz-tick-text {
        fill: white;
        font-size: 5px !important;
    }

    .rz-category-axis .rz-tick-text {
        text-anchor: middle;
    }

    .rz-legend-text {
        fill: white;
    }

    text {
        color: white;
    }

    .rz-axis .rz-axis-title {
        stroke: none;
        text-anchor: middle;
        fill: white;
    }
</style>
<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@topUsers" CategoryProperty="UserName" ValueProperty="AverageGrade" Title="Mejores escaladores">
            <TooltipTemplate Context="data">
                <div>
                    Usuario: <strong>@data.UserName</strong><br />
                    Grado Medio: <strong>@data.AverageGrade</strong>
                </div>
            </TooltipTemplate>
        </RadzenColumnSeries>
        <RadzenValueAxis>
            <RadzenAxisTitle Text="Grado Medio" />
        </RadzenValueAxis>
        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Nombre de Usuario" />
        </RadzenCategoryAxis>
    </RadzenChart>
</div>

@code {
    IList<UserDataItem> topUsers = new List<UserDataItem>();

    protected override async Task OnInitializedAsync()
    {
        // Obtén la lista de usuarios de tu servicio AuthService
        var users = await AuthService.GetAllUsers();
        var userRoutes = new List<UserClimbingRoutes>();


        foreach (var user in users)
        {
            // Obtén las rutas escaladas por el usuario utilizando un método en tu servicio UserClimbingRouteService
            var routes = await UserClimbingRouteService.GetUserClimbingRoutes(user.Id);
            userRoutes.AddRange(routes);
        }

        var userGrades = new Dictionary<string, double>();
        // Calcular el grado medio para cada usuario
        foreach (var user in users)
        {
            var userRoutesList = userRoutes.Where(route => route.UserId == user.Id).ToList();
            if (userRoutesList.Any())
            {
                var totalRating = 0.0;
                var totalRatings = 0;

                foreach (var route in userRoutesList)
                {
                    // Obtén la calificación para la ruta utilizando un método en tu servicio RouteRatingService
                    var rating = await RouteRatingService.GetAverageRating(route.ClimbingRouteId);
                    if (!double.IsNaN(rating))
                    {
                        totalRating += rating;
                        totalRatings++;
                    }
                }

                if (totalRatings > 0)
                {
                    var averageGrade = totalRating / totalRatings;
                    userGrades.Add(user.Name, averageGrade);
                }
            }
        }

        // Crear la lista de objetos UserDataItem
        topUsers = userGrades.Select(kv => new UserDataItem { UserName = kv.Key, AverageGrade = kv.Value }).ToList();

        // Ordenar la lista por el grado medio y tomar los 5 usuarios con el grado más alto
        topUsers = topUsers.OrderByDescending(item => item.AverageGrade).Take(5).ToList();
    }

    public class UserDataItem
    {
        public string UserName { get; set; }
        public double AverageGrade { get; set; }
    }
}
