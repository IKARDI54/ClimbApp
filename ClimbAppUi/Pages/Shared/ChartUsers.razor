@page "/listar-vias-escaladas"

@using System.Globalization
@using BlazorCLIMB.Data.Dapper.Repositories;
@using BlazorCLIMB.Model;
@using BlazorCLIMB.Model.BlazorCRUD.Model;
@using BlazorCLIMB.UI.Interfaces;
@using BlazorCLIMB.UI.Services;
@inject IClimbingRouteService ClimbingRouteService
@inject IAuthService AuthService
@inject IUserClimbingRouteService UserClimbingRouteService
@inject IRouteRatingService RouteRatingService
<style>
    .rz-scheme-pastel .rz-series-0 {
        fill: #269bbd;
    }

    text.rz-tick-text {
        fill: white;
        font-size: 5px !important;
    }

    .rz-category-axis .rz-tick-text {
        text-anchor: middle;
    }

    .rz-legend-text {
        fill: white;
    }

    text {
        color: white;
    }

    .rz-axis .rz-axis-title {
        stroke: none;
        text-anchor: middle;
        fill: white;
    }
</style>



<div class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@topUsers" CategoryProperty="UserName" ValueProperty="TotalScore" Title="Mejores escaladores">
            <TooltipTemplate Context="data">
                <div>
                    Usuario: <strong>@data.UserName</strong><br />
                    Grado Medio: <strong>@data.TotalScore</strong>
                </div>
            </TooltipTemplate>
        </RadzenColumnSeries>

        <RadzenValueAxis>
            <RadzenAxisTitle Text="Puntuación Total" />
        </RadzenValueAxis>
        <RadzenCategoryAxis>
            <RadzenAxisTitle Text="Nombre de Usuario" />
        </RadzenCategoryAxis>
    </RadzenChart>
</div>


@code {
    IList<UserDataItem> topUsers = new List<UserDataItem>();
    Dictionary<int, List<ClimbingRoute>> userRoutes = new Dictionary<int, List<ClimbingRoute>>(); 
    List<User> users = new List <User>();

    protected override async Task OnInitializedAsync()
    {
        users = (await AuthService.GetAllUsers()).ToList();

        
        var userScores = new Dictionary<string, double>();

        var gradeScores = new Dictionary<string, double>
{
    { "6a", 30 },
    { "6a+", 60 },
    { "6b", 90 },
    { "6b+", 120 },
    { "6c", 150 },
    { "6c+", 180 },
    { "7a", 210 },
    { "7a+", 240 },
    { "7b", 270 },
    { "7b+", 300 },
    { "7c", 330 },
    { "7c+", 360 },
    { "8a", 390 },
    { "8a+", 420 },
    { "8b", 450 },
    { "8b+", 480 },
    { "8c", 510 },
    { "8c+", 540 },
    { "9a", 570 },
    { "9a+", 600 },
    { "9b", 630 },
    { "9b+", 660 },
    { "9c", 690 }
};

        foreach (var user in users)
        {
            // Obtiene las rutas de escalada asociadas a cada usuario.
            var userRoutesList = await UserClimbingRouteService.GetUserClimbingRoutes(user.Id);
            
            // Almacena las rutas en el diccionario 'userRoutes'.
            userRoutes[user.Id] = userRoutesList.Select(ur => ur.ClimbingRoute).ToList();

            if (userRoutesList.Any())
            {
                var totalScore = 0.0;

                foreach (var route in userRoutesList)
                {
                    // Obtén el grado de la ruta
                    var climbingRoute = await ClimbingRouteService.GetClimbingRouteDetails(route.ClimbingRouteId);
                    var routeGrade = climbingRoute.Grade;

                    // Si el grado de la ruta está en el diccionario, suma la puntuación correspondiente
                    if (gradeScores.ContainsKey(routeGrade))
                    {
                        totalScore += gradeScores[routeGrade];
                    }
                }
                // Agregamos el puntaje total del usuario al diccionario 'userScores'.
                userScores.Add(user.Name, totalScore);
            }
        }

        // Crear la lista de objetos UserDataItem a partir de los nombres de usuario y los puntajes totales.
        topUsers = userScores.Select(kv => new UserDataItem { UserName = kv.Key, TotalScore = kv.Value }).ToList();

        // Ordenar la lista por puntaje descendente y tomar los 5 mejores puntajes.
        topUsers = topUsers.OrderByDescending(item => item.TotalScore).Take(5).ToList();
    }

    public class UserDataItem
    {
        public string UserName { get; set; }
        public double TotalScore { get; set; }
    }
}
