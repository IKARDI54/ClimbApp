@page "/Register"

@using BlazorCLIMB.UI.Interfaces
@using System.ComponentModel.DataAnnotations
@using BlazorCLIMB.UI.Services;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager


<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    body {
        background-image: url('/images/169781.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        height: 100%;
        width: 100%;
        backdrop-filter: blur(5px);
    }

    .card {
        width: 420px;
        margin: 0 auto;
        background: linear-gradient(0deg, rgba(128, 128, 128, 0.3), rgba(0, 0, 0, 0.8));
        padding: 20px;
        border-radius: 10px;
    }

    .card-title {
        text-align: center;
        font-size: 24px;
        color: #FFF;
    }

    .form-control {
        background-color: transparent;
        color: black;
        margin: 10px;
        border: 2px solid #817B77;
        border-radius: 10px;
        padding-left: 30px;
    }

    .input-icon {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    .card-body h4 {
        text-align: center;
        font-size: 24px;
        color: #FFF;
    }

    .card-body h6 {
        text-align: center;
        font-size: 16px;
        color: #FFF;
    }

    .login-button {
        width: 80%;
        margin: 20px auto;
        display: block;
        background-color: rgba(255, 255, 255, 0.7); /* Fondo semi-transparente blanco */
        border-radius: 10px;
        color: #000; /* Color de texto negro */
    }

    .google-button {
        background-color: rgba(255, 255, 255, 0.7); /* Fondo semi-transparente blanco */
        color: #000; /* Color de texto negro */
        width: 80%;
        margin: 0 auto;
        display: block;
        border-radius: 10px;
    }

        .google-button i {
            margin-right: 10px;
        }

    .register-link {
        text-align: center;
        font-size: 12px;
        color: #FFF;
        margin-top: 10px;
    }

        .register-link a {
            color: #FFF;
            font-weight: bold;
            text-decoration: none;
        }
</style>

<div class="container">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Register</h3>
        </div>
        <div class="card-body">
            <form @onsubmit="@HandleValidSubmit">
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="text" class="form-control" placeholder="Name" @bind="model.Name" required />
                </div>
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="text" class="form-control" placeholder="Email" @bind="model.Email" required />
                </div>
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="password" class="form-control" placeholder="Password" @bind="model.Password" required />
                </div>
                <div class="form-group">
                    <span class="input-icon"></span>
                    <input type="password" class="form-control" placeholder="Confirm Password" @bind="confirmPassword" required />
                </div>
                <div class="form-group">
                    <div class="custom-file">
                    <InputFile class="form-control" id="avatar" accept="image/*" OnChange="OnAvatarChange" />
                    </div>
                </div>
                <button type="submit" class="btn btn-secondary login-button">Register</button>
            </form>
            <p style="color:white">@message</p> <!-- Mensaje de registro -->
        </div>
    </div>
</div>

@code {
    AuthModel model = new AuthModel();
    string confirmPassword = "";
    string message = "";
    string role = "User";
    string avatarUrl;

    private async Task HandleValidSubmit()
    {
        if (model.Password != confirmPassword)
        {
            message = "Passwords do not match. Please try again.";
        }
        else
        {
            if (model.Img == null)
            {
                message = "Please select an avatar image.";
                return;
            }

            bool isCreated = await AuthService.CreateUser(model);
            message = isCreated ? "User Created" : "Failed to create user";
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/Login");
        }
    }

    private async Task OnAvatarChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                model.Img = memoryStream.ToArray();
                avatarUrl = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(model.Img)}";
            }
        }
        else
        {
            message = "Please select an avatar image.";
        }
    }

    public class AuthModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public byte[] Img { get; set; }
    }
}
