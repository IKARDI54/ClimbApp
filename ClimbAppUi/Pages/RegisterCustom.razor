@page "/Register"
@using BlazorCLIMB.UI.Pages.Shared
@using BlazorCLIMB.Model;
@using BlazorCLIMB.UI.Interfaces
@using System.ComponentModel.DataAnnotations
@using BlazorCLIMB.UI.Services;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager


<style>
   
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    body {
        background: rgb(178,180,188);
        background: radial-gradient(circle, rgba(178,180,188,1) 21%, rgba(98,82,85,1) 100%);
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        height: 100%;
        width: 100%;
        backdrop-filter: blur(5px);
    }

    .card {
        width: 50rem;
        height: auto;
        margin: 0 auto;
        background: linear-gradient(0deg, rgba(128, 128, 128, 0.3), rgba(0, 0, 0, 0));
        padding: 2rem; 
        border-radius: 0.5rem;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); 
    }

    .card-title {
        text-align: center;
        font-size: 2rem; 
        color: #FFF;
    }

    .form-group {
        position: relative;
        margin-bottom: 0.5rem;
    }

    .input-icon .icon {
        position: absolute;
        left: 0.10rem;
        top: 50%;
        transform: translateY(-50%);
        color: #fff;
        font-size: 1.2rem;
    }

    .form-control {
        cursor: auto !important;
        width: 80%; 
        height: 2rem; 
        padding: 0.5rem 0.5rem 0.5rem 3rem; 
        font-size: 1rem;
        border-radius: 0.25rem;
        border: 1px solid #ccc;
        margin: 10px auto;
        background-color: transparent;
        color: black;
    }

        
        .form-control::placeholder {
            padding-left: 10%; 
            color: white;
          
        }

    .login-button {
        width: 50%; 
        padding: 0.5rem;
        margin: 20px auto;
        display: block;
        border-radius: 10px;
        color: #000;
        background-color: rgba(255, 255, 255, 0.7);
        border: none;
    }

    .register-link,
    .message {
        text-align: center;
        font-size: 1rem;
        color: #FFF;
        margin-top: 1rem;
    }

        .register-link a {
            color: #FFF;
            font-weight: bold;
            text-decoration: none;
        }

    .card-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid #ccc; 
}
.user-icons-container {
    flex-grow: 1; 
    display: flex;
    justify-content: center; 
    gap: 1rem; 
}
        .card-header .user-icon {
            
            color: #fff;
            margin-bottom: 0.5rem;
        }
      

.card-header img {
    height: 4rem;
    
}
    .custom-file-input {
        display: block; 
        width: 70%; 
        margin: 20px auto;
        border-radius: 0.5rem; 
        padding: 0.5rem;
        border: 1px solid #ccc; 
        background-color: rgba(255, 255, 255, 0.7);
        color: black
        
      
    }

        .custom-file-input::file-selector-button {
            border-radius: 0.25rem; 
            margin-right: 0.5rem; 
            padding: 0.5rem;
            background-color: #7c7277; 
            color: white; 
            border: 1px solid black; 
        }
          .toast {
        position: fixed; 
        bottom: 20px; 
        right: 20px;
        background-color: #333; 
        color: #fff; 
        border-radius: 5px; 
        padding: 10px 20px; 
        z-index: 9999; 
       
    }

    
        .toast .toast-icon {
            float: left;
            margin-right: 10px; 
        }

      
        .toast .message {
            font-size: 16px;
        }

        
        .toast #icon {
            font-size: 24px;
        }
</style>


<div class="container">
    <div class="card">
        <div class="card-header">
            <img src="images/logoClimb.png"  style="height: 5rem; border-radius:50%;" alt="ClimbApp Logo" />
            <div class="user-icons-container" style="margin-left:-25%;"> 
                <i class="fa-solid fa-book-skull user-icon" style="font-size: 2rem;"></i>
                <i class="fa fa-pencil-alt user-icon" style="font-size: 2rem; margin-top:4px;"></i>
                 <h2 style="color:white;">Create Account</h2>
            </div>
        </div>
        <div class="card-body">
            <form @onsubmit="@HandleValidSubmit">
                <div class="form-group input-icon">
                    <i class="fa fa-user icon"></i>
                    <input type="text" class="form-control" placeholder="Name" @bind="model.Name" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-envelope icon"></i>
                    <input type="text" class="form-control" placeholder="Email" @bind="model.Email" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-key icon"></i>
                    <input type="password" class="form-control" placeholder="Password" @bind="model.Password" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-check icon"></i>
                    <input type="password" class="form-control" placeholder="Confirm Password" @bind="confirmPassword" required />
                </div>
                <div class="form-group">
                    <InputFile class="custom-file-input" style="margin-top:35px; margin-bottom:35px;" id="avatar" accept="image/*" OnChange="OnAvatarChange" />
                </div>
               <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap">
                    <div style="flex-grow: 1;"></div>
                    <RadzenButton Type="submit" Variant="Variant.Outlined" Shade="Shade.Darker" Text="Register" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Medium" fon  />
                    <RadzenButton Type="submit" Variant="Variant.Outlined" Shade="Shade.Darker" Click="Cancelar" Text="Return" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Medium" />
                    <div style="flex-grow: 1;"></div> 
                </RadzenStack>
            </form>
          
        </div>
        
    </div>
      @if (showToast)
    {
        <div class="toast" style="display: block;">
            <div class="toast-icon">
                <RadzenIcon Icon="account_box" IconColor="@Colors.Info" />
            </div>
            <div class="toast-message">@message</div>
        </div>
        
    }
</div>


@code {
    AuthModel model = new AuthModel();
    string confirmPassword = "";
    string message = "";
    string EncryptPhoto;
    private bool showToast = false;
    private string toastMessage = "";

    private async Task HandleValidSubmit()
    {
        if (model.Password != confirmPassword)
        {
            message = "Los Passwords no coinciden. Por favor intentalo de nuevo.";
            ShowToast(message);
        }
        else
        {
            if (model.Img == null)
            {
                message = "Por favor selecciona una imagen de avatar.";
                ShowToast(message);
                return;
            }
            //Aqui insertamos al usuario en base de datos
            bool isCreated = await AuthService.CreateUser(model);

            message = isCreated ? "Usuario Creado" : "El Usuario ya existe... ";
            ShowToast(message);
            StateHasChanged();
            await Task.Delay(3500);
            NavigationManager.NavigateTo("/Login");
        }
    }
     private void Cancelar()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task OnAvatarChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        // ¿Traes una foto? Perfecto, vamos a hacer que persista.
        if (imageFile != null)
        {
            // Inicializamos un MemoryStream para manejar los datos de la imagen en la memoria del servidor.
            using (var memoryStream = new MemoryStream())
            {
                
                // almacena en la memoria del servidor como una secuencia de bytes.
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);

                // Convertimos la secuencia de bytes almacenada en el MemoryStream
                //  al array de bytes del modelo. Este paso transforma la imagen en
                //  un formato binario que puede ser manejado y almacenado por la aplicación.
                model.Img = memoryStream.ToArray();

                // Finalmente, codificamos el array de bytes en Base64 y lo concatenamos 
                // con el tipo de contenido y el prefijo 'data' para formar una Data URL. 
                // Esta URL representa la imagen en un formato que puede ser directamente
                //  incrustado e interpretado por los navegadores web.
                EncryptPhoto = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(model.Img)}";
            }

            // Nota Técnica: Este enfoque tiene la ventaja de integrar completamente la imagen en la aplicación, 
            // eliminando la necesidad de rutas de archivo o almacenamiento externo. Sin embargo, debe considerarse
            //  el impacto en el uso de la memoria y el potencial impacto en el rendimiento, especialmente con imágenes de gran tamaño.

        }
        else
        {
            // Si no nos pasas una foto, te pediremos amablemente que elijas una.
            message = "Please select an avatar image.";
        }
    }
      private void ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;
        StateHasChanged(); 

      
        Task.Delay(3000).ContinueWith(t =>
        {
            showToast = false;
           
        });
    }
}
