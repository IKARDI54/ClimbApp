@page "/Register"

@using BlazorCLIMB.UI.Interfaces
@using System.ComponentModel.DataAnnotations
@using BlazorCLIMB.UI.Services;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager


<style>
    <style >
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    body {
        background: rgb(178,180,188);
        background: radial-gradient(circle, rgba(178,180,188,1) 21%, rgba(98,82,85,1) 100%);
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
        height: 100%;
        width: 100%;
        backdrop-filter: blur(5px);
    }

    .card {
        width: 50rem; /* Ancho ajustado */
        height: auto; /* Altura automática para mantener la proporción */
        margin: 0 auto;
        background: linear-gradient(0deg, rgba(128, 128, 128, 0.3), rgba(0, 0, 0, 0.8));
        padding: 2rem; /* Ajustado para proporcionar más espacio */
        border-radius: 0.5rem;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); /* Opcional: sombra para la tarjeta */
    }

    .card-title {
        text-align: center;
        font-size: 2rem; /* Ajustado para tamaños en rem */
        color: #FFF;
    }

    .form-group {
        position: relative;
        margin-bottom: 0.5rem;
    }

    .input-icon .icon {
        position: absolute;
        left: 0.10rem;
        top: 50%;
        transform: translateY(-50%);
        color: #fff;
        font-size: 1.2rem;
    }

    .form-control {
        width: 90%; /* Disminuir el ancho a 90% del contenedor */
        height: 3rem; /* Aumentar la altura del input */
        padding: 0.5rem 0.5rem 0.5rem 3rem; /* Padding izquierdo para el icono */
        font-size: 1rem;
        border-radius: 0.25rem;
        border: 1px solid #ccc;
        margin: 10px auto; /* Centro el input con margen automático */
        background-color: transparent;
        color: black;
    }

        /* Aplicar estilos al placeholder */
        .form-control::placeholder {
            padding-left: 10%; /* Esto no moverá el texto, solo cambiará el padding interno */
            color: white;
            font-size: bold;
        }

    .login-button {
        width: 50%; /* Ajustado para ocupar todo el ancho disponible */
        padding: 0.5rem;
        margin: 20px auto;
        display: block;
        border-radius: 10px;
        color: #000;
        background-color: rgba(255, 255, 255, 0.7);
        border: none;
    }

    .register-link,
    .message {
        text-align: center;
        font-size: 1rem;
        color: #FFF;
        margin-top: 1rem;
    }

        .register-link a {
            color: #FFF;
            font-weight: bold;
            text-decoration: none;
        }

    .card-header {
    display: flex;
    align-items: center;
    justify-content: space-between; /* Esto distribuirá el espacio uniformemente entre los elementos */
    padding: 1rem;
    border-bottom: 1px solid #ccc; /* Línea que separa el header del body */
}
.user-icons-container {
    flex-grow: 1; /* Permite que el contenedor de íconos crezca y llene el espacio */
    display: flex;
    justify-content: center; /* Centra los íconos horizontalmente */
    gap: 1rem; /* Añade un espacio entre los íconos */
}
        .card-header .user-icon {
            /* Hacer el icono más grande */
            color: #fff; /* Color blanco para la silueta */
            margin-bottom: 0.5rem;
        }
      

.card-header img {
    height: 4rem; /* Ajusta según sea necesario */
    /* No es necesario vertical-align en flexbox */
}
    .custom-file-input {
        display: block; /* Asegúrate de que el input se comporte como un bloque */
        width: 70%; /* O cualquier ancho que desees para el input */
        margin: 20px auto;
        border-radius: 0.5rem; /* Esquinas redondeadas */
        padding: 0.5rem; /* Algo de padding para que el botón sea más grande */
        border: 1px solid #ccc; /* Un borde ligero */
        background-color: rgba(255, 255, 255, 0.7); /* Fondo blanco o cualquier color que prefieras */
        color: black; /* Color del texto */
        font-size: 1rem; /* Tamaño del texto */
        cursor: pointer; /* Cambia el cursor a un puntero para indicar que es un botón */
    }

        .custom-file-input::file-selector-button {
            border-radius: 0.25rem; /* Esquinas redondeadas para el botón */
            margin-right: 0.5rem; /* Margen entre el botón y el nombre del archivo */
            padding: 0.5rem; /* Algo de padding */
            background-color: #7c7277; /* Color de fondo del botón */
            color: white; /* Color del texto del botón */
            border: 1px solid black; /* Eliminar el borde del botón */
        }
</style>

</style>

<div class="container">
    <div class="card">
        <div class="card-header">
    <img src="images/logoClimb.png"  style="height: 5rem; border-radius:50%;" alt="ClimbApp Logo" />
            <div class="user-icons-container" style="margin-left:-25%;"> 
                <i class="fa-solid fa-book-skull user-icon" style="font-size: 2rem;"></i>
                <i class="fa fa-pencil-alt user-icon" style="font-size: 2rem; margin-top:4px;"></i>
                 <h2 style="color:white;">Create Account</h2>
            </div>
</div
        <div class="card-body">
            <form @onsubmit="@HandleValidSubmit">
                <div class="form-group input-icon">
                    <i class="fa fa-user icon"></i>
                    <input type="text" class="form-control" placeholder="Name" @bind="model.Name" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-envelope icon"></i>
                    <input type="text" class="form-control" placeholder="Email" @bind="model.Email" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-key icon"></i>
                    <input type="password" class="form-control" placeholder="Password" @bind="model.Password" required />
                </div>
                <div class="form-group input-icon">
                    <i class="fa fa-check icon"></i>
                    <input type="password" class="form-control" placeholder="Confirm Password" @bind="confirmPassword" required />
                </div>
                <div class="form-group">
                    <InputFile class="custom-file-input" style="margin-top:35px; margin-bottom:35px;" id="avatar" accept="image/*" OnChange="OnAvatarChange" />
                </div>
              <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap">
                    <RadzenButton Type="submit" Variant="Variant.Outlined" Shade="Shade.Darker" Text="Register" ButtonStyle="ButtonStyle.Primary" Style="width: 30%; margin-left:35%;" />

                </RadzenStack>
            </form>
            <p class="message">@message</p> <!-- Mensaje de registro -->
        </div>
    </div>
</div>

@code {
    AuthModel model = new AuthModel();
    string confirmPassword = "";
    string message = "";
    string role = "User";
    string avatarUrl;

    private async Task HandleValidSubmit()
    {
        if (model.Password != confirmPassword)
        {
            message = "Passwords do not match. Please try again.";
        }
        else
        {
            if (model.Img == null)
            {
                message = "Please select an avatar image.";
                return;
            }

            bool isCreated = await AuthService.CreateUser(model);
            message = isCreated ? "User Created" : "Failed to create user";
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/Login");
        }
    }

    private async Task OnAvatarChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                model.Img = memoryStream.ToArray();
                avatarUrl = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(model.Img)}";
            }
        }
        else
        {
            message = "Please select an avatar image.";
        }
    }

    public class AuthModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public byte[] Img { get; set; }
    }
}
