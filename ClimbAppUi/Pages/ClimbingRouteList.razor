@page "/climbingRouteList"
@using Model
@using Interfaces
@inject IClimbingRouteService ClimbingRouteService
@inject NavigationManager NavigationManager

<div class="container">
    <h1 class="mt-4">Listado de Vías Escaladas</h1>

    <div class="mb-4">
        <a href="/climbingRouteDetails" class="btn btn-primary">Añadir Ruta</a>
    </div>

        <div class="row">
            @foreach (var route in climbingRoutes)
            {
                <div class="col-md-3 mb-4">
                    <div class="card">
                        <img src="@route.Imag" class="card-img-top" alt="Imagen de la ruta">
                        <div class="card-body">
                            <h5 class="card-title">@route.Name</h5>
                            <p class="card-text">Sector: @route.ClimbingSector</p>
                            <p class="card-text">Escuela: @route.ClimbingSchoolId</p>
                            <p class="card-text">@route.Description</p>
                            <strong>Valoración:</strong> ⭐⭐⭐⭐☆
                            <br>
                            <strong>Comentarios:</strong> "Esta ruta es increíble, ¡me encantó!"
                        </div>
                        <div class="card-footer">
                            <a href="/climbingRouteDetails/@route.Id" class="btn btn-primary">Editar</a>
                            <button @onclick="() => DeleteClimbingRoute(route.Id)" class="btn btn-danger">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<ClimbingRoute> climbingRoutes;
    private string loadingError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            loadingError = "An error occurred while loading the routes: " + ex.Message;
        }
    }

    protected async Task DeleteClimbingRoute(int routeId)
    {
        try
        {
            // Llama al servicio para eliminar la ruta de escalada con el ID proporcionado.
            await ClimbingRouteService.DeleteClimbingRoute(routeId);

            // Después de eliminar la ruta, actualiza la lista de rutas para reflejar los cambios.
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            // Maneja cualquier error que pueda ocurrir durante la eliminación.
            loadingError = "An error occurred while deleting the route: " + ex.Message;
        }
    }
}
