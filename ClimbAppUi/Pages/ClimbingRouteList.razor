@page "/climbingRouteList"
@using BlazorBootstrap;
@using BlazorCLIMB.Model.BlazorCRUD.Model;
@using Model
@using Interfaces
@using BlazorCLIMB.UI.Services
@inject IRouteRatingService RouteRatingService
@inject IUserClimbingRouteService UserClimbingRouteService
@inject IAuthService AuthService
@inject IClimbingRouteService ClimbingRouteService
@inject NavigationManager NavigationManager

<style>

    .container.full-background {
        height: 100%;
        margin: 0;
        min-height: 100%;
        background-color: #6d7477;
        padding: 0;
    }
    .RadzenDataGrid {
        background-color: transparent;
    }

    .search-container {
        margin-right:-50px;
        margin-top:-50px;
        display: flex;
        justify-content: center;
    }

    .search-input {
        padding: 10px;
        font-size: 16px;
        border: 2px solid #ccc;
        border-right: none;
        border-top-left-radius: 5px;
        border-bottom-left-radius: 5px;
        width: 250px;
        outline: none;
    }

    .search-button {
        padding: 10px;
        background-color: #5cb85c;
        border: none;
        border-top-right-radius: 5px;
        border-bottom-right-radius: 5px;
        transition: background-color 0.3s;
    }

        .search-button i {
            color: white;
            font-size: 16px; 

        .search-button:hover {
            background-color: #4cae4c;
        }

    .grilla-personalizada {
        background-color: #f2f2f2; /
    }
 

    .grilla-container {
        padding: 30px; 
        margin-right: -20px;
        margin-top: -40px;
    }

    .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #333;
        color: #fff;
        border-radius: 5px;
        padding: 10px 20px;
        z-index: 9999;
    }


        .toast .toast-icon {
            float: left;
            margin-right: 10px;
        }

        .toast .message {
            font-size: 16px;
        }

        .toast #icon {
            font-size: 24px;
        }
</style>

    <div class="d-flex align-items-center justify-content-between mb-0">
        <h1 style=" color:white; margin-left:33%" >Listado de Vías Escaladas</h1>
        <img src="images/logoClimb.png" alt="ClimbApp Logo" style="margin:10px; height: 4.75rem; border-radius: 50%;" class="logo" />
    </div>
<div class="mb-4 d-flex justify-content-center">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="Radzen.FlexWrap.Wrap">
        <RadzenButton Click="AddClimbingRoute" Variant="Variant.Outlined" Text="Añadir una Vía" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:5px;  border:solid 1px white" />
            <RadzenButton Click="LoginGo" Variant="Variant.Outlined" Text="Volver" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:5px; border:solid 1px white" />
            
        </RadzenStack>
    </div>
  <div class="grilla-container">
    @if (showToast)
    {
        <div class="toast" style="display: block; position: fixed; bottom: 20px; right: 20px; background-color: #333; color: #fff; border-radius: 5px; padding: 10px 20px; z-index: 9999;">
            <div class="toast-icon" style="float: left; margin-right: 10px;">
                <RadzenIcon Icon="account_box" IconColor="@Colors.Info" />
            </div>
            <div class="toast-message" style="font-size: 16px;">
                &#x1F604 @message
            </div>
        </div>
    }

    <RadzenDataGrid AllowGrouping="true" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5" AllowPaging="true" PagerPosition="PagerPosition.Bottom" AllowPagerText="true" Data="@climbingRoutes">
        <Columns>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Name" Title="Nombre" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Grade" Title="Grado" Filterable="true" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="ClimbingSchoolId" Title="Escuela">
                <Template Context="route">
                    @GetSchoolName(route.ClimbingSchoolId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Description" Title="Descripción" />
            <RadzenDataGridColumn Title="Valoración Promedio" TItem="ClimbingRoute">
                <Template Context="route">
                    @route.AverageRating
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Número de Valoraciones" TItem="ClimbingRoute">
                <Template Context="route">
                    @route.NumberOfRatings
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Acciones" TItem="ClimbingRoute">
                <Template Context="route">
                    
                   @if (user?.Role == "SuperUser")
                    { 
                        <RadzenButton Variant="Variant.Outlined" Click="() => DeleteClimbingRoute(route.Id)" Icon="delete" ButtonStyle="ButtonStyle.Dark" />
                        <RadzenButton Variant="Variant.Outlined" Click="() => EditClimbingRoute(route.Id)" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
                    }
                    <RadzenButton Variant="Variant.Outlined" Click="() => AnotarViaEscalada(route.Id)" Icon="check" ButtonStyle="ButtonStyle.Success" />

                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    
</div>
  

<BlazorBootstrap.Modal @ref="modal" Title="Editar Ruta" Style="background-color:#e5e8ed;">
    <BodyTemplate>
        <div class="mb-3">
            <label for="name" class="form-label">Nombre:</label>
            <input type="text" class="form-control" id="name" @bind="selectedRoute.Name" />
        </div>
        <div class="mb-3">
            <label for="grade" class="form-label">Grado:</label>
            <input type="text" class="form-control" id="grade" @bind="selectedRoute.Grade" />
        </div>
        <div class="mb-3">
            <label for="sector" class="form-label">Sector:</label>
            <input type="text" class="form-control" id="sector" @bind="selectedRoute.ClimbingSector" />
        </div>
        <div class="mb-3">
            <label for="school" class="form-label">Escuela:</label>
            <select class="form-select" id="school" @bind="selectedRoute.ClimbingSchoolId">
                <option value="1">Cuenca</option>
                <option value="2">Entrepeñas</option>
                <option value="3">Fin del Mundo</option>
                <option value="4">Patones</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Descripción:</label>
            <textarea class="form-control" id="description" rows="4" @bind="selectedRoute.Description"></textarea>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="OnHideModalClick">Cancelar</button>
        <button class="btn btn-primary" @onclick="SaveClimbingRoute">Guardar</button>

    </FooterTemplate>
</BlazorBootstrap.Modal>

@code {

    private BlazorBootstrap.Modal modal;
    private IEnumerable<ClimbingRoute> climbingRoutes;
    private string loadingError;
    private ClimbingRoute selectedRoute = new ClimbingRoute();
    private double averageRating;
    private int numberOfRatings;
    private User user;
    private string message = "";
    private bool showToast = false;
    

    protected override async Task OnInitializedAsync()
    {
        int userId = UserSession.UserId; 
        if (userId != 0)
        {
        user = await AuthService.GetUserById(userId);
        }

        try
        {
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
            CalculateAverageRatingAndNumberOfRatingsForEachRoute();
        }
        catch (Exception ex)
        {
            loadingError = "Ha ocurrido un error al cargar las rutas: " + ex.Message;
            climbingRoutes = Enumerable.Empty<ClimbingRoute>();
            ShowToast(loadingError);
        }
    }
    private void OnRender(DataGridRenderEventArgs<ClimbingRoute> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "ClimbingSchoolId" });
            StateHasChanged();
        }
    }

    private async void AnotarViaEscalada(int routeId)
    {
        if (user != null) 
        {
        message = "Felicidades por su encadene!!! ClimbApp le da la Enhorabuena!!, " + user.Name;
        StateHasChanged();
        ShowToast(message);
        await Task.Delay(3000);
        NavigationManager.NavigateTo($"/userRoutes/{routeId}");
        
        }
        else
        {
        }
    }
    private string GetSchoolName(int climbingSchoolId)
    {
        switch (climbingSchoolId)
        {
            case 1:
                return "Cuenca";
            case 2:
                return "Entrepeñas";
            case 3:
                return "Fin del Mundo";
            case 4:
                return "Patones";
            default:
                return "Desconocida";
        }
    }

    private async void EditClimbingRoute(int routeId)
    {
        try
        {
            selectedRoute = climbingRoutes.FirstOrDefault(r => r.Id == routeId);
            modal.ShowAsync();
        }
        catch (Exception ex)
        {
            ShowToast("Ha ocurrido un error al editar la ruta de escalada: " + ex.Message);
        }
    }


    private async void AddClimbingRoute()
    {
        try
        {
            selectedRoute = new ClimbingRoute();
            modal.ShowAsync();
        }
        catch (Exception ex)
        {
            ShowToast("Ha ocurrido un error al agregar una nueva ruta de escalada: " + ex.Message);
        }
    }

    private void LoginGo()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task DeleteClimbingRoute(int routeId)
    {
        try
        {
            await ClimbingRouteService.DeleteClimbingRoute(routeId);
            StateHasChanged();
            ShowToast("Se ha borrado la ruta");
        }
        catch (Exception ex)
        {
            loadingError = "Ha ocurrido un error al agregar una nueva ruta de escalada: " + ex.Message;
            ShowToast(loadingError);
        }
    }

    private async Task SaveClimbingRoute()
    {
        try
        {
        if (selectedRoute.Id != 0)
        {
            await ClimbingRouteService.UpdateClimbingRoute(selectedRoute);
        }
        else
        {
            await ClimbingRouteService.InsertClimbingRoute(selectedRoute);
        }

        modal.HideAsync();
        climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        ShowToast("La ruta se ha guardado con éxito.");

        }
         catch (Exception ex)
        {
                loadingError = "Ha ocurrido un error al guardar la ruta: " + ex.Message;
                ShowToast(loadingError);
            }

        }

    private void OnHideModalClick()
    {
        modal.HideAsync();
    }
 
        private string searchTerm = string.Empty;

     
    private async Task CalculateAverageRatingAndNumberOfRatingsForEachRoute()
    {
        foreach (var route in climbingRoutes)
        {
            double totalRating = 0.0;
            int totalRatings = 0;

            route.AverageRating = await RouteRatingService.GetAverageRating(route.Id);

            totalRatings = await RouteRatingService.GetNumberOfRatings(route.Id);
            
            route.NumberOfRatings = totalRatings;
        }
    }
    private void ShowToast(string message)
    {
        this.message = message;
        showToast = true;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(t =>
        {
            showToast = false;
        });
    }
}