@page "/climbingRouteList"
@using BlazorBootstrap;
@using Model
@using Interfaces
@inject IClimbingRouteService ClimbingRouteService
@inject NavigationManager NavigationManager

<div class="container" Style=" background-image: url('/images/back.png'); background-size: cover; background-repeat: no-repeat; background-position: center center;">
    <div class="d-flex align-items-center justify-content-between mb-0">
        <h1 class="mt-4" style="margin:10px; color:white; margin-left:30%" >Listado de Vías Escaladas</h1>
        <img src="images/logoClimb.png" alt="ClimbApp Logo" style="margin:10px; height: 4.75rem; border-radius: 50%;" class="logo" />
    </div>
    <div class="mb-4">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="Radzen.FlexWrap.Wrap" style="color:white; margin-left:35%">
             <RadzenButton Click="AddClimbingRoute" Variant="Variant.Outlined" Text="Añadir una Vía" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:5px;" />
            <RadzenButton Click="LoginGo" Variant="Variant.Outlined" Text="Volver" Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Dark" Shade="Shade.Darker" style="font-weight: bold; margin-left:5px;" />
            
        </RadzenStack>
    </div>
    <div class="alert alert-info">
        Filtra las vías por escuela utilizando las opciones de filtro en la columna "Escuela". Simplemente haz clic en el ícono de filtro en la cabecera de la columna y selecciona la escuela que deseas filtrar.
    </div>
    <RadzenDataGrid AllowGrouping="true"  AllowFiltering="true" AllowColumnResize="true" Style="width: 100%;" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="8" AllowPaging="true" PagerPosition="PagerPosition.Bottom" AllowPagerText="true" Data="@climbingRoutes">
        <Columns>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Name" Title="Nombre" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Grade" Title="Grado" Filterable="true" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="ClimbingSector" Title="Sector" Filterable="true" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="ClimbingSchoolId" Title="Escuela">
                <Template Context="route">
                    @GetSchoolName(route.ClimbingSchoolId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Description" Title="Descripción" />
            <RadzenDataGridColumn Title="Acciones" TItem="ClimbingRoute">
                <Template Context="route">
                    <RadzenButton Variant="Variant.Outlined" Click="() => EditClimbingRoute(route.Id)" Icon="edit" ButtonStyle="ButtonStyle.Primary" />
                    <RadzenButton Variant="Variant.Outlined" Click="() => DeleteClimbingRoute(route.Id)" Icon="delete" ButtonStyle="ButtonStyle.Dark" />
                    <RadzenButton Variant="Variant.Outlined" Click="() => AnotarViaEscalada(route.Id)" Icon="check" ButtonStyle="ButtonStyle.Success" />

                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    @if (!string.IsNullOrEmpty(loadingError))
    {
        <p>@loadingError</p>
    }
</div>

<!-- Modal para Editar/Agregar Rutas -->
<BlazorBootstrap.Modal @ref="modal" Title="Editar Ruta" Style="background-color:#e5e8ed;">
    <BodyTemplate>
        <div class="mb-3">
            <label for="name" class="form-label">Nombre:</label>
            <input type="text" class="form-control" id="name" @bind="selectedRoute.Name" />
        </div>
        <div class="mb-3">
            <label for="grade" class="form-label">Grado:</label>
            <input type="text" class="form-control" id="grade" @bind="selectedRoute.Grade" />
        </div>
        <div class="mb-3">
            <label for="sector" class="form-label">Sector:</label>
            <input type="text" class="form-control" id="sector" @bind="selectedRoute.ClimbingSector" />
        </div>
        <div class="mb-3">
            <label for="school" class="form-label">Escuela:</label>
            <select class="form-select" id="school" @bind="selectedRoute.ClimbingSchoolId">
                <option value="1">Cuenca</option>
                <option value="2">Entrepeñas</option>
                <option value="3">Fin del Mundo</option>
                <option value="4">Patones</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Descripción:</label>
            <textarea class="form-control" id="description" rows="4" @bind="selectedRoute.Description"></textarea>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="OnHideModalClick">Cancelar</button>
        <button class="btn btn-primary" @onclick="SaveClimbingRoute">Guardar</button>

    </FooterTemplate>
</BlazorBootstrap.Modal>

@code {

    private BlazorBootstrap.Modal modal;
    private IEnumerable<ClimbingRoute> climbingRoutes;
    private string loadingError;
    private ClimbingRoute selectedRoute = new ClimbingRoute();

    protected override async Task OnInitializedAsync()
    {
       

        try
        {
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            loadingError = "An error occurred while loading the routes: " + ex.Message;
            climbingRoutes = Enumerable.Empty<ClimbingRoute>();
        }
    }
    private void OnRender(DataGridRenderEventArgs<ClimbingRoute> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "ClimbingSchoolId" });
            StateHasChanged();
        }
    }

    private void AnotarViaEscalada(int routeId)
    {
        NavigationManager.NavigateTo($"/userRoutes/{routeId}");
    }
    private string GetSchoolName(int climbingSchoolId)
    {
        switch (climbingSchoolId)
        {
            case 1:
                return "Cuenca";
            case 2:
                return "Entrepeñas";
            case 3:
                return "Fin del Mundo";
            case 4:
                return "Patones";
            default:
                return "Desconocida";
        }
    }

    private void EditClimbingRoute(int routeId)
    {
        selectedRoute = climbingRoutes.FirstOrDefault(r => r.Id == routeId);
        modal.ShowAsync();
    }

    private void AddClimbingRoute()
    {
        selectedRoute = new ClimbingRoute();
        modal.ShowAsync();
    }
    private void LoginGo()
    {
        NavigationManager.NavigateTo("/climbingRouteList");
    }

    private async Task DeleteClimbingRoute(int routeId)
    {
        try
        {
            await ClimbingRouteService.DeleteClimbingRoute(routeId);
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            loadingError = "An error occurred while deleting the route: " + ex.Message;
        }
    }

    private async Task SaveClimbingRoute()
    {
        if (selectedRoute.Id != 0)
        {
            await ClimbingRouteService.UpdateClimbingRoute(selectedRoute);
        }
        else
        {
            await ClimbingRouteService.InsertClimbingRoute(selectedRoute);
        }

        modal.HideAsync();
        climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
    }

    private void OnHideModalClick()
    {
        modal.HideAsync();
    }
}