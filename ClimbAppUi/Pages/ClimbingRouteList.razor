@page "/climbingRouteList"
@using Model
@using Interfaces
@inject IClimbingRouteService ClimbingRouteService
@inject NavigationManager NavigationManager

<div class="container">
    <h1 class="mt-4">Listado de Vías Escaladas</h1>

    <div class="mb-4">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenButton Variant="Variant.Outlined" Click="AddClimbingRoute" Text="Añadir Ruta" ButtonStyle="ButtonStyle.Primary" />
           
        </RadzenStack>
    </div>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" Style="width: 100%;" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="8" AllowPaging="true" PagerPosition="PagerPosition.Top" AllowPagerText="true" Data="@climbingRoutes">
        <Columns>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Name" Title="Nombre" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Grade" Title="Grado"/>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="ClimbingSector" Title="Sector" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="ClimbingSchoolId" Title="Escuela">
                <Template Context="route">
                    @GetSchoolName(route.ClimbingSchoolId)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Description" Title="Descripción" />
            <RadzenDataGridColumn TItem="ClimbingRoute" Property="Rating" Title="Valoración"/>
            <RadzenDataGridColumn Title="Acciones" TItem="ClimbingRoute">
                <Template Context="route">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.Wrap">
                        <RadzenButton Variant="Variant.Outlined" Click="() => EditClimbingRoute(route.Id)" Icon="edit" ButtonStyle="ButtonStyle.Warning" />

                        
                        <RadzenButton Variant="Variant.Outlined" Click="() => DeleteClimbingRoute(route.Id)" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    @if (!string.IsNullOrEmpty(loadingError))
    {
        <p>@loadingError</p>
    }
</div>

@code {
    private IEnumerable<ClimbingRoute> climbingRoutes;
    private string loadingError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            loadingError = "An error occurred while loading the routes: " + ex.Message;
            climbingRoutes = Enumerable.Empty<ClimbingRoute>();
        }
    }

    private string GetSchoolName(int climbingSchoolId)
    {
        switch (climbingSchoolId)
        {
            case 1:
                return "Cuenca";
            case 2:
                return "Entrepeñas";
            case 3:
                return "Fin del Mundo";
            case 4:
                return "Patones";
            default:
                return "Desconocida";
        }
    }

    private void EditClimbingRoute(int routeId)
    {
        NavigationManager.NavigateTo($"/climbingRouteDetails/{routeId}");
    }

    private void AddClimbingRoute()
    {
        NavigationManager.NavigateTo("/climbingRouteDetails");
    }

    private async Task DeleteClimbingRoute(int routeId)
    {
        try
        {
            await ClimbingRouteService.DeleteClimbingRoute(routeId);
            climbingRoutes = await ClimbingRouteService.GetAllClimbingRoutes();
        }
        catch (Exception ex)
        {
            loadingError = "An error occurred while deleting the route: " + ex.Message;
        }
    }
}
